datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Workflow {
    id          String   @id @default(uuid())
    name        String
    description String?
    // org_id        String
    enabled     Boolean  @default(true)
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    triggers   Trigger[]
    nodes      Node[]
    executions Execution[]
    edges      Edge[]

    @@map("workflows")
}

model Trigger {
    id            String   @id @default(uuid())
    workflow_id   String
    name          String?
    type          String
    configuration Json
    is_active     Boolean  @default(true)
    created_at    DateTime @default(now())

    workflow   Workflow    @relation(fields: [workflow_id], references: [id], onDelete: Cascade)
    executions Execution[]

    @@map("triggers")
}

model Node {
    id             String   @id @default(uuid())
    workflow_id    String
    type           String
    name           String
    parent_id      String?
    created_at     DateTime @default(now())
    config         Json
    template_id    String
    retry_attempts Int      @default(0)
    retry_delay_ms Int      @default(0)

    workflow Workflow           @relation(fields: [workflow_id], references: [id], onDelete: Cascade)
    outgoing Edge[]             @relation("SourceNode")
    incoming Edge[]             @relation("TargetNode")
    group    Edge[]             @relation("GroupNode")
    logs     NodeExecutionLog[]
    template NodeTemplate       @relation(fields: [template_id], references: [id])

    @@map("nodes")
}

model NodeTemplate {
    id          String  @id @default(uuid())
    name        String  @unique
    description String?
    type        String
    category_id String?

    category NodeCategory? @relation(fields: [category_id], references: [id])
    Node     Node[]

    @@map("node_templates")
}

model NodeCategory {
    id          String   @id @default(uuid())
    name        String   @unique
    description String?
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    NodeTemplate NodeTemplate[]

    @@map("node_category")
}

model Edge {
    id          String  @id @default(uuid())
    workflow_id String
    source      String
    target      String
    group_id    String?
    condition   String?
    expression  String?

    workflow   Workflow @relation(fields: [workflow_id], references: [id], onDelete: Cascade)
    sourceNode Node     @relation("SourceNode", fields: [source], references: [id], onDelete: Cascade)
    targetNode Node     @relation("TargetNode", fields: [target], references: [id], onDelete: Cascade)
    groupNode  Node?    @relation("GroupNode", fields: [group_id], references: [id], onDelete: Cascade)

    @@map("edges")
}

model Execution {
    id           String    @id @default(uuid())
    workflow_id  String
    trigger_id   String?
    started_at   DateTime  @default(now())
    completed_at DateTime?
    status       String
    context      Json

    workflow Workflow           @relation(fields: [workflow_id], references: [id], onDelete: Cascade)
    trigger  Trigger?           @relation(fields: [trigger_id], references: [id])
    nodeLogs NodeExecutionLog[]

    @@map("executions")
}

model NodeExecutionLog {
    id           String    @id @default(uuid())
    execution_id String
    node_id      String
    status       String
    started_at   DateTime  @default(now())
    completed_at DateTime?
    data         Json?

    execution Execution @relation(fields: [execution_id], references: [id], onDelete: Cascade)
    node      Node      @relation(fields: [node_id], references: [id], onDelete: Cascade)

    @@map("node_execution_logs")
}

model Seed {
    id        String   @id @default(uuid())
    name      String   @unique
    version   Int
    appliedAt DateTime @default(now())

    @@map("seeds")
}
